buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
    userOrg = "grails"
}

apply plugin:'idea'

subprojects { project->

    final String projectName = project.name
    if (!(projectName.contains("tests") || projectName.contains("docs"))) {
        apply plugin: 'com.jfrog.bintray'
    }

    if (!projectName.contains("docs")) {
        if (projectName.contains("tests")) {
            apply plugin: 'java'
        } else {
            apply plugin: 'java-library'
        }
        apply plugin: 'groovy'
    }

    ext {
        userOrg = "grails"
    }

    group "org.grails"
    version project.projectVersion

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    if (projectName in ["views-core", "views-json", "views-markup"]) {

        configurations {
            documentation
        }

        dependencies {
            documentation "org.fusesource.jansi:jansi:$jansiVersion"
            documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
            documentation 'info.picocli:picocli:4.4.0'
            documentation ("com.github.javaparser:javaparser-core:$javaParserCoreVersion")

            testImplementation "org.spockframework:spock-core:$spockVersion"
            testImplementation "org.codehaus.groovy:groovy-test-junit5:${groovyVersion}"
            testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
            testImplementation "org.junit.platform:junit-platform-runner:1.6.2"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"
        }

        tasks.withType(Test) {
            useJUnitPlatform()
            testLogging {
                showStandardStreams = true
                exceptionFormat = 'full'
            }
        }

        groovydoc.classpath += configurations.documentation
    }



}
