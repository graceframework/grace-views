buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:views-gradle:$functionalTestViewsGradleVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementPluginVersion"
    }
}

version "0.1-SNAPSHOT"
group "org.grails.plugins"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "io.spring.dependency-management"
//apply plugin: "org.grails.plugins.views-markup"

ext {
    gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    provided 'org.springframework.boot:spring-boot-starter-logging'
    provided "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    provided "org.grails:grails-web-boot"
    provided "org.grails:grails-dependencies"
    provided "javax.servlet:javax.servlet-api:$servletApiVersion"

    api project(":views-json")
    api project(":views-markup")
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

compileGsonViews {
    classpath += configurations.compileClasspath
}
