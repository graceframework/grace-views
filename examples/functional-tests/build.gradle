buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:views-gradle:$viewsGradleVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
    }
}

plugins {
    id "io.spring.dependency-management"
    id 'eclipse'
    id 'idea'
}

version "0.1"
group "functional.tests"

apply plugin: "war"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

// uncommenting fails because we have functional tests for compilation errors
//apply plugin: "org.grails.plugins.views-json"
//apply plugin: "org.grails.plugins.views-markup"

ext {
    gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
    minifyJs = true
    minifyCss = true
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if(details.requested.group == 'org.grails' &&
                details.requested.name.startsWith('grails-datastore')) {

            if (details.requested.name.equals("grails-datastore-gorm-hibernate5")) {
                details.useVersion("$hibernateGormVersion")
            } else if (details.requested.name.startsWith("grails-datastore-gorm-mongodb") ||
            details.requested.name.equals("grails-datastore-gorm-bson")) {
                details.useVersion("$mongodbVersion")
            } else {
                details.useVersion("$gormVersion")
            }
        }

    }
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate5"
    runtime "org.apache.tomcat:tomcat-jdbc:9.0.13"
    compile "org.grails.plugins:mongodb"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"
    compile "org.grails.plugins:scaffolding"

    compile project(":views-json")
    compile project(":views-markup")
    compile project(":examples-functional-tests-plugin")

    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"

    runtime project(":views-json-templates")

    testCompile project(":views-json-testing-support")

    console "org.grails:grails-console"

    testCompile "io.micronaut:micronaut-http-client:$micronautVersion"
}

integrationTest {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
