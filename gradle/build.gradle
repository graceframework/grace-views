buildscript {
	repositories {
        mavenCentral()
		maven { url "https://repo.grails.org/grails/core" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
	}
	dependencies {
		classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementPluginVersion"
	}
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'

ext {
	userOrg = 'graceframework'
	isGrailsPlugin = false
	projectDesc = "Grace Views Gradle Plugin"
}

group "org.graceframework.plugins"

repositories {
	mavenCentral()
	maven { url "https://repo.grails.org/grails/core" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencyManagement {
	imports {
		mavenBom "org.graceframework:grace-bom:$graceVersion"
	}
	applyMavenExclusions false
}

dependencies {
	compileOnly gradleApi()
	api "org.graceframework:grace-gradle-plugin:$graceVersion"
	api "org.codehaus.groovy:groovy:$groovyVersion"
}

if (!tasks.findByName("sourcesJar")) {
	tasks.register("sourcesJar", Jar) {
		classifier = 'sources'
		from project.sourceSets.main.allSource
	}
}

if (!tasks.findByName("javadocJar")) {
// no javadocs, just a workaround
	tasks.register("javadocJar", Jar) {
		classifier = 'javadoc'
		from tasks.named("groovydoc").get().outputs
	}
}

gradlePlugin {
	plugins {
		viewsJson {
			id = 'org.graceframework.plugins.views-json'
			implementationClass = 'grails.views.gradle.json.GrailsJsonViewsPlugin'
			displayName = "Grails Json Views Gradle Plugin"
			description = 'The Gradle plugin for Json Views'
		}
		viewsMarkup {
			id = 'org.graceframework.plugins.views-markup'
			implementationClass = 'grails.views.gradle.markup.GrailsMarkupViewsPlugin'
			displayName = "Grails Markup Views Gradle Plugin"
			description = 'The Gradle plugin for Markup Views'
		}
	}
}

afterEvaluate {
	signing {
		required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
		Publication[] publications = new Publication[publishing.publications.size() - 1]
		project.publishing.publications.findAll { it.name != 'pluginMaven' }.toArray(publications)
		sign(publications)
	}

	publishing.publications.each { MavenPublication publication ->
		if (publication.name != "pluginMaven") {
			publication.pom.withXml {
				def xml = asNode()
				xml.children().last() + pomInfo
			}
		}
	}
}
